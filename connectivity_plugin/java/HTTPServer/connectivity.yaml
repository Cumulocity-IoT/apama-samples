# $Copyright(c) 2016-2017 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.$
# Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH.

# Load the HTTP server transport plug-in and the JSON codec plug-in
connectivityPlugins:
  httpServer:
    directory: ${PARENT_DIR}/Release
    classpath: httpserver-sample.jar
    class: com.apama.samples.HTTPServer
  jsonCodec:
    directory: ${APAMA_HOME}/lib/
    classpath: json-codec.jar
    class: com.softwareag.connectivity.plugins.JSONCodec

startChains:
  # Create a chain in which JSON-formatted PUT requests sent to the HTTP server
  # get turned into EPL events
  httpServerChain:
    # When this host plug-in is sent messages from the transport that contain
    # map<string, object>, it will attempt to turn those maps into EPL events.
    # Fields will be filled in based on the values of the keys that match those
    # field names.
    #
    # By default that event type will be 'FromJSON' (unless the message
    # meta-data explicitly contains a 'sag.type' entry to say otherwise, which
    # it doesn't in this example)
    #
    # If not all fields of the event can be populated, that's ok (because of
    # allowMissing). They'll just be filled in with default values such as 0,
    # "", 0.0 etc.
    - apama.eventMap:
        defaultEventType: FromJSON
        allowMissing: true
    # Any messages passing through this codec from the transport are assumed to
    # have string payloads containing JSON documents. This codec translates them
    # into map<string, object> payloads which get sent up towards the host.
    - jsonCodec
    # Sends messages up the chain in response to PUT requests. The payload will
    # be a string containing the body of the request. In this sample the body
    # will contain a JSON document.
    - httpServer:
        port: ${httpServerChain.httpServer.port} # configured in httpserver.properties
