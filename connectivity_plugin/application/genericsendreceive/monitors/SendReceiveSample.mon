/*
	This file contains some sample event definitions and a simple test application 
	for quickly testing and getting started with sending and receiving events to/from 
	a connectivity transport plug-in. 

	Copyright (c) 2018 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.

	Licensed under the Apache License, Version 2.0 (the "License"); you may not use this 
	file except in compliance with the License. You may obtain a copy of the License at
	http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software distributed under the
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
	either express or implied. 
	See the License for the specific language governing permissions and limitations under the License.

*/

package mypackage;

using com.softwareag.connectivity.ConnectivityPlugins;
using com.softwareag.connectivity.ExtraFieldsDict;

/** Control event sent into the correlator (typically from the AppReady.evt file) after all 
	EPL injections, once the application is ready to process messages. 
*/
event AppReady
{
}

/** Sample event for messages received from an external transport.

	In a real application this would be replaced with one or more domain/application-specific event definitions.

	Any incoming top-level payload fields that are not explicitly mapped will go into the extraFields dictionary. 
*/
@ExtraFieldsDict("extraFields")
event MySampleInput
{
	string message;
	string myParameter;
	dictionary<string,any> extraFields;
}

/** Sample event for messages that can be sent to an external transport.
	For round-trip testing, this event type may also be used for incoming events. 

	In a real application this would be replaced with one or more domain/application-specific event definitions.

	Additional top-level payload fields can be set in the outgoing messages by including them in the extraFields dictionary. 
*/
@ExtraFieldsDict("extraFields")
event MySampleOutput
{
	string message;
	string myParameter;
	dictionary<string,any> extraFields;
}

/** Control event that can be sent to change the channels used by 
	this sample to match those for a specific connectivity plug-in. 
	
	The input and output channels may be the same or different.  
	
	This event is additive if sent more than once. 
*/
event ConfigureSample
{
	/** An input channel to subscribe to. */
	string inputChannel;
	/** A channel to send a MySampleOutput event to at startup, or "" for none. */
	string outputChannel;
	
	/** If true, a sample output event will be sent every 5 seconds which can be useful 
	for some interactive testing scenarios. If false, a single output event will be 
	sent once the application is initialized, which is a better approach for transports 
	that hold messages in a queue (to avoid a large build-up of messages from 
	previous sessions). If no ConfigureSample event is sent, the default is false. */
	boolean keepSending;
}

/** Control event that can be sent externally (for example from engine_send) 
	to the default channel ("") to request that an event be "sent" on to 
	the specified transport channel. 
	*/
event SendThis
{
	string channel;
	any eventToSend;
}



/** This monitor implements a simple application that logs all events received on a specific transport channel(s), 
	and also sends an output event on a specific transport channel (once the AppReady event is received).

	This monitor is useful for testing, diagnostics, and getting started with a new connectivity plug-in.   
*/
monitor SendReceiveSampleMonitor 
{
	// TODO - edit these default channel names if necessary to match your transport's YAML configuration
	// For example both input and output could be set to "um:MyChannelName" if using Universal Messaging
	ConfigureSample config := ConfigureSample(
		"SampleInputChannel",  // input channel
		"SampleOutputChannel", // output channel
		false // keep sending output events every few seconds
		); 
	
	action onload() 
	{
		// Just like a real application, wait for an AppReady event before 
		// subscribing to any channels (this prevents any messages being received 
		// while parts of the application are not yet injected or fully ready 
		// to handle them). 
		on AppReady() {
			log "\n--- Sample EPL application is now ready to start" at INFO;
			com.softwareag.connectivity.ConnectivityPlugins.onApplicationInitialized();
			
			spawn startSampleApp(config) to context("sampleContext", false);

			// Allow sending additional output events at any time (after startup) using engine_send or similar tools
			on all SendThis() as toSend {
				log "\n--- Sending specified sample output event to channel '"+toSend.channel+"': "+toSend.eventToSend.valueToString() at INFO;
				send toSend.eventToSend to toSend.channel;
			}
		}
		
		// Support dynamic configuration of channels from a .evt file if desired
		on ConfigureSample(): config {
			// First ConfigureSample replaces the defaults, later ones are in addition
			on AppReady() and all (ConfigureSample() as newconfig ) { spawn startSampleApp(newconfig) to context("sampleContext", false); }
		}
	}
	
	action startSampleApp(ConfigureSample config)
	{
			log "SendReceiveSampleMonitor is using input channel '"+config.inputChannel+"' and output channel '"+config.outputChannel+"'" at INFO;
			monitor.subscribe(config.inputChannel);
			// Log incoming events, typically MySampleInput and also (for round-trip testing) MySampleOutput events
			on all any() as received {
				if received.getTypeName() != SendThis.getName() {
					log "\n--- Received sample event from channel '"+config.inputChannel+"': "+received.valueToString() at INFO;
				}
			}
			
			// Send sample event(s) automatically once the application is ready
			if config.outputChannel != "" {
				sendSampleOutput(config.outputChannel);
				if config.keepSending {
					on all wait(5.0) {
						sendSampleOutput(config.outputChannel);
					}
				}
			}
	}
	
	action sendSampleOutput(string channel) 
	{
			MySampleOutput eventToSend := MySampleOutput(
					"Hello world sample message "+integer.incrementCounter("SendReceiveSampleMonitor").toString(), 
					"myParameterValue", 
					new dictionary<string,any>
				);
			log "\n--- Sending sample output event to channel '"+channel+"': "+eventToSend.toString() at DEBUG;
			send eventToSend to channel;
	}
}
