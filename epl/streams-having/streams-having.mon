/**
 * Demonstrate the use of 'having' in streams
 *
 * This example achieves the same as the 'streams' sample -- it even
 * accepts the same input and produces the same output -- but it uses
 * a 'having' clause instead of creating a separate stream for each
 * symbol.
 *
 * $Copyright (c) 2012 Progress Software Corporation. All Rights Reserved.$
 * $Copyright (c) 2013-2016, 2019 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH.
 */

/**
 * Bring the mean aggregate into our namespace
 */
using com.apama.aggregates.mean;
using com.apama.aggregates.first;
using com.apama.aggregates.last;

/**
 * The event type (global) that we will use
 */
event Tick
{
	string symbol;
	float price;
}

/**
 * The monitor itself
 */
monitor Streams
{
	// Threshold price change to look for
	constant float THRESHOLD := 1.0;

	action onload() {
		// Take the original stream of ticks and produce a derived
		// stream of ticks that denotes, for each symbol, the mean of
		// the most recent ten prices.
		stream<Tick> means :=
			from t in all Tick()
				partition by t.symbol
				retain 10
				group by t.symbol
				select Tick(t.symbol, mean(t.price));

		// Then take this stream of means and retain two values per
		// symbol.
		//
		// Use a 'having' clause to find occasions when the current
		// mean differs from the previous one by more than the
		// threshold. In those cases (but not otherwise) output an
		// 'alert' tick giving the symbol and the difference in
		// average price.
		stream<Tick> alerts :=
			from t in means
				partition by t.symbol
				retain 2
				group by t.symbol
				having last(t.price) > first(t.price)+THRESHOLD
				    or last(t.price) < first(t.price)-THRESHOLD
				select Tick(t.symbol, last(t.price)-first(t.price));

		// Note that if performance was valued over clarity, the
		// having clause above could be re-written as:
		//      having (last(t.price)-first(t.price)).abs() > THRESHOLD

		// Send the alert ticks
		from alerts as t { send t to "output"; }
	}
}
