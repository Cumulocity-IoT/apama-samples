/**
 * Timed windows in MonitorScript
 *
 * This sample tracks the total value of shares traded for a particular symbol
 * in a given period of time and sends alerts if that exceeds a given
 * threshold.  After the first alert for a given stock the threshold is
 * increased before another alert is given.
 *
 * $Copyright (c) 2010 Progress Software Corporation. All Rights Reserved.$ 
 * $Copyright (c) 2013-2016 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH. 
 */

/**
 * Bring the sum aggregate into our namespace
 */
using com.apama.aggregates.sum;

/**
 * The event type of input events
 */
event Order
{ 
	string symbol; 
	float price; 
	integer volume;
}

/**
 * the event type of output events
 */
event Alert
{
	string symbol;
	float traded;
}

/**
 * The monitor itself
 */
monitor Streams 
{

	// The number of seconds to window over
	constant float WINDOWSIZE := 6.0;
	
	// Initial threshold total traded to alert on (modified for subsequent
	// alerts)
	float threshold := 10000.0;

	action onload()
	{ 
		// Setup listeners for two different stocks. These are spawned to two
		// monitor instances so that the threshold variable can be updated
		// independently for each symbol.
		spawn watchForStock("ibm");
		spawn watchForStock("msft");
	}

	action watchForStock(string symbol)
	{
		// Create a stream from incoming events, filtered on symbol.  This will
		// output an Order to any stream connected to it whenever an Order with
		// that symbol is received by the correlator.
		stream<Order> orders := all Order(symbol=symbol);

		// Sliding window containing the total value of all the trades in the
		// last six seconds.
		//
		// This takes the output from the previous stream, using the symbol 't'
		// to represent each event from that stream. The within clause creates a
		// sliding window containing any event received in the last WINDOWSIZE
		// seconds (in this case 6). The sum aggregate is used to calculate the
		// sum of the value of all the trades within the window. The arguments to
		// the aggregate can be any function of the input events.
		// 
		// This stream outputs a value any time the contents of the window
		// change, that is, any time an item arrives in the window and WINDOWSIZE
		// seconds after an item arrived in the window (when it leaves the
		// window).
		stream<float> tradeTotals := from t in orders within WINDOWSIZE select sum(t.volume.toFloat()*t.price);
	
		// Send an alert when the total volume traded in the stock exceeds the
		// threshold in the window period.
		//
		// The result of this filter is coassigned to a block of monitorscript
		// which is executed once for each value exceeding the threshold.
		//
		// All the expressions in the streaming extensions are evaluated
		// dynamically, so the monitorscript output block updates the threshold
		// variable and the new value is used in subsequent comparisons.

		from a in tradeTotals where a > threshold select a as alertPrice 
		{	
			threshold := alertPrice + 10000.0;
			send Alert(symbol, alertPrice) to "output";
		}
	} 
}
