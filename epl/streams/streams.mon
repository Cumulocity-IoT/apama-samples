/**
 * A simple example of Streaming extensions to monitorscript
 *
 * This application receives a stream of Tick events and calculates the
 * average price over the last 10 events. If this average changes more than a
 * threshold then it sends an event containing the price difference
 *
 * $Copyright (c) 2010,2012 Progress Software Corporation. All Rights Reserved.$
 * $Copyright (c) 2013-2016 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH.
 */

/**
 * Bring the mean aggregate into our namespace
 */
using com.apama.aggregates.mean;

/**
 * The event type (global) that we will use
 */
event Tick
{
	string symbol;
	decimal price;
}

/**
 * The monitor itself
 */
monitor Streams
{
	// Threshold price change to look for
	constant decimal THRESHOLD := 1.0d;

	action onload()
	{
		// Setup listeners for two different stocks.
		// They are independent, so can be in different
		// instances of the monitor.
		spawn watchForStock("ibm");
		spawn watchForStock("msft");
	}

	action watchForStock(string symbol)
	{
		// Create a stream from incoming events, filtered on symbol.  This will
		// output a Tick to any stream connected to it whenever a Tick with that
		// symbol is received by the correlator.
		stream<Tick> ticks := all Tick(symbol=symbol);

		// Create a stream of decimals representing the average of the last 10
		// ticks in the ticks stream.
		//
		// This takes the output from the previous stream, using the symbol 't'
		// to represent each event from that stream. The retain clause creates a
		// sliding window of size 10 and the aggregate mean operator takes one of
		// the fields of the event and calculates the aggregate over the contents
		// of the window.
		//
		// The result of the aggregate is a decimal so the whole expression returns
		// a stream of decimals. There will be an item in the stream every time the
		// contents of the window changes.
		stream<decimal> averages := from t in ticks retain 10 select mean(t.price);

		// Create a stream delaying averages by one event.
		//
		// Similarly, this is using the output of the averages stream and using
		// the symbol 'a' to represent the values in the input stream. The window
		// is size 1 and the rstream operator outputs items _leaving_ the window,
		// hence the output is the input delayed by one item.
		stream<decimal> previous := from a in averages retain 1 select rstream a;

		// Join together the averages and previous streams performing an action
		// when the difference is outside the threshold.
		//
		// Averages is used in both the previous expression and this one,
		// creating a split in the flow of items, which is recombined in this
		// query. This means that items will always arrive on both sides of the
		// join simultaneously and there is no need to specify windows, although
		// both sides of the join could be windowed.
		//
		// The join is a full cross-join of all the events on one side of the
		// join with all the events on the other, which is then filtered by the
		// where clause. Where clauses and select clauses can have any
		// monitorscript expressions in them.
		//
		// Rather than putting the result of the join into a stream as above, we
		// are coassigning the results to a block of monitorscript code in the
		// same way that listeners work in traditional monitorscript. The block
		// of procedural code will be called once for each item that is output
		// from the join and where clauses.

		from a in averages from p in previous where a > p+THRESHOLD or a < p-THRESHOLD select a-p as alertPrice
		{
			send Tick(symbol, alertPrice) to "output";
		}
	}
}
