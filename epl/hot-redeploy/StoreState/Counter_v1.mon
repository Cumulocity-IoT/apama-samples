/**
 * Version 1 of this Sample application.  Increments an integer count by 1 on every Process() event.
 *
 * $Copyright (c) 2017 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH. 
 */
package com.apama.sample.redeploy.v1;

using com.apama.sample.redeploy.Create;
using com.apama.sample.redeploy.Process;

// Event to store this monitors minimum state that will be saved to Memory Store
event State {
	string name;	// Name of this instance
	integer count;
}

monitor Counter {
	
	// Version of this monitor
	constant integer VERSION := 1;
	
	// Global state of this monitor instance
	State state;
	
	// ==== Boilerplate code for Upgrader support ====
	
	// Upgrade helper
	com.apama.sample.upgrader.Upgrader upgrader;

	action onload() {
		
		// Prepare the state store
		upgrader.init("com.apama.sample.redeploy.Counter", state, VERSION, restoreState, ready);
	}
	
	// Callback to restore a saved state - no op on v1
	action restoreState(any restoreState) {}
	
	// ==== Application Code ====
	
	// Callback when upgrader is ready
	action ready() {
		// Processing create events
		on all Create() as c {
			spawn startProcessing(State(c.name, c.startCount));
		}
	}
	
	// Set up listeners for input and Upgrade events
	action startProcessing(State stateParam) {
		
		state := stateParam;
		// ==== Boilerplate code to register for Upgrade events ====
		upgrader.listenForUpgradesAndDie(state.name, state);
		
		// Subscribe to the event channel
		monitor.subscribe("DATA");
			
		// Listen for input events
		on all Process() {
			state.count := state.count +1;
			print state.name+" count "+state.count.toString();
		}
	}
}
